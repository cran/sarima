// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// uniKalmanLikelihood0b
List uniKalmanLikelihood0b(const NumericVector& y, const List& mod, const NumericVector& nit, const LogicalVector& op, const LogicalVector& update);
RcppExport SEXP _sarima_uniKalmanLikelihood0b(SEXP ySEXP, SEXP modSEXP, SEXP nitSEXP, SEXP opSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type mod(modSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type op(opSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(uniKalmanLikelihood0b(y, mod, nit, op, update));
    return rcpp_result_gen;
END_RCPP
}
// uniKalmanForecast0b
List uniKalmanForecast0b(const int& nahead, const List& mod, const LogicalVector& update);
RcppExport SEXP _sarima_uniKalmanForecast0b(SEXP naheadSEXP, SEXP modSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nahead(naheadSEXP);
    Rcpp::traits::input_parameter< const List& >::type mod(modSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(uniKalmanForecast0b(nahead, mod, update));
    return rcpp_result_gen;
END_RCPP
}
// uniKalmanForeUp0b
List uniKalmanForeUp0b(const NumericVector& y, const int& nahead, const List& mod, const NumericVector& nit, const LogicalVector& update);
RcppExport SEXP _sarima_uniKalmanForeUp0b(SEXP ySEXP, SEXP naheadSEXP, SEXP modSEXP, SEXP nitSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type nahead(naheadSEXP);
    Rcpp::traits::input_parameter< const List& >::type mod(modSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(uniKalmanForeUp0b(y, nahead, mod, nit, update));
    return rcpp_result_gen;
END_RCPP
}
// arma_Q0gnb0
arma::mat arma_Q0gnb0(const arma::colvec& phi, const arma::colvec& theta, double tol);
RcppExport SEXP _sarima_arma_Q0gnb0(SEXP phiSEXP, SEXP thetaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_Q0gnb0(phi, theta, tol));
    return rcpp_result_gen;
END_RCPP
}
// arma_Q0gnb
arma::mat arma_Q0gnb(const arma::colvec& phi, const arma::colvec& theta, const double tol);
RcppExport SEXP _sarima_arma_Q0gnb(SEXP phiSEXP, SEXP thetaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_Q0gnb(phi, theta, tol));
    return rcpp_result_gen;
END_RCPP
}
// DAcvfWrtMA
arma::mat DAcvfWrtMA(const arma::vec& x);
RcppExport SEXP _sarima_DAcvfWrtMA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(DAcvfWrtMA(x));
    return rcpp_result_gen;
END_RCPP
}
// MAacvf0
NumericVector MAacvf0(const NumericVector& x);
RcppExport SEXP _sarima_MAacvf0(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MAacvf0(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sarima_uniKalmanLikelihood0b", (DL_FUNC) &_sarima_uniKalmanLikelihood0b, 5},
    {"_sarima_uniKalmanForecast0b", (DL_FUNC) &_sarima_uniKalmanForecast0b, 3},
    {"_sarima_uniKalmanForeUp0b", (DL_FUNC) &_sarima_uniKalmanForeUp0b, 5},
    {"_sarima_arma_Q0gnb0", (DL_FUNC) &_sarima_arma_Q0gnb0, 3},
    {"_sarima_arma_Q0gnb", (DL_FUNC) &_sarima_arma_Q0gnb, 3},
    {"_sarima_DAcvfWrtMA", (DL_FUNC) &_sarima_DAcvfWrtMA, 1},
    {"_sarima_MAacvf0", (DL_FUNC) &_sarima_MAacvf0, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_sarima(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
